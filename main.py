import asyncio

import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from supabase import create_client, Client
from datetime import datetime, timedelta

from parser import get_usd_prices, get_eur_prices
from config import TOKEN, SUPABASE_URL, SUPABASE_KEY
from init_db import create_supabase_tables

bot = Bot(token=TOKEN)
dp = Dispatcher()

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)


async def ensure_tables_exist():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å —ñ —Å—Ç–≤–æ—Ä—é—î —ó—Ö, —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        try:
            supabase.table("users").select("*").limit(1).execute()
            print("–¢–∞–±–ª–∏—Ü—è 'users' —ñ—Å–Ω—É—î")
        except Exception:
            print("–¢–∞–±–ª–∏—Ü—è 'users' –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ...")
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
            create_supabase_tables()
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–±–ª–∏—Ü—é —Ü—ñ–Ω
        try:
            supabase.table("prices").select("*").limit(1).execute()
            print("–¢–∞–±–ª–∏—Ü—è 'prices' —ñ—Å–Ω—É—î")
        except Exception:
            print("–¢–∞–±–ª–∏—Ü—è 'prices' –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ...")
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
            create_supabase_tables()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–∞–±–ª–∏—Ü—å: {e}")
        # –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ —Ä–æ–±–æ—Ç—É –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ, –º–æ–∂–ª–∏–≤–æ —Ç–∞–±–ª–∏—Ü—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å


@dp.message(Command("start"))
async def start_command(message: types.Message):
    response = supabase.table("users").select("*").eq("user_id", message.from_user.id).execute()
    users = response.data

    if users:  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —î –≤ –±–∞–∑—ñ
        await message.answer("–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stop, —â–æ–± –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è.")
    else:
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_data = {"user_id": message.from_user.id, "username": message.from_user.username}
        add_response = supabase.table("users").insert(user_data).execute()

        if add_response.data:
            await message.answer(
                "–í—ñ—Ç–∞—é, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ –¥–æ —Å–ø–∏—Å–∫—É –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å! "
                "–ë–æ—Ç –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω –∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω. "
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stop, —â–æ–± –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è."
            )
        else:
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(Command("stop"))
async def stop_command(message: types.Message):
    response = supabase.table("users").delete().eq("user_id", message.from_user.id).execute()
    if response.data:
        await message.answer("–í–∞—Å –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å.")
    else:
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ.")


async def check_prices():
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏ USD
    usd_prices = get_usd_prices()

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏ EUR
    eur_prices = get_eur_prices()

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –∫–∏—ó–≤—Å—å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—ñ
    kyiv_tz = pytz.timezone("Europe/Kiev")
    current_time = datetime.now(kyiv_tz)

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –¥–æ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—É
    formatted_time = current_time.strftime("%Y-%m-%dT%H:%M:%S")

    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏ USD –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    response_usd = supabase.table("prices").select("*").eq("currency", "USD").order("timestamp", desc=True).limit(
        1).execute()
    previous_usd_price = response_usd.data[0] if response_usd.data else None

    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏ EUR –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    response_eur = supabase.table("prices").select("*").eq("currency", "EUR").order("timestamp", desc=True).limit(
        1).execute()
    previous_eur_price = response_eur.data[0] if response_eur.data else None

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏ –¥–ª—è USD
    if previous_usd_price:
        previous_buy_price = previous_usd_price["buy_price"]
        previous_sell_price = previous_usd_price["sell_price"]
        previous_nbu_price = previous_usd_price.get("nbu_price")

        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏ —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î–º–æ, —è–∫—â–æ —î –∑–º—ñ–Ω–∏
        if usd_prices["buy_price"] != previous_buy_price or usd_prices["sell_price"] != previous_sell_price or \
                usd_prices["nbu_price"] != previous_nbu_price:
            await notify_users(usd_prices, previous_buy_price, previous_sell_price, previous_nbu_price, "USD")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏ –¥–ª—è EUR
    if previous_eur_price:
        previous_buy_price = previous_eur_price["buy_price"]
        previous_sell_price = previous_eur_price["sell_price"]
        previous_nbu_price = previous_eur_price.get("nbu_price")

        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏ —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î–º–æ, —è–∫—â–æ —î –∑–º—ñ–Ω–∏
        if eur_prices["buy_price"] != previous_buy_price or eur_prices["sell_price"] != previous_sell_price or \
                eur_prices["nbu_price"] != previous_nbu_price:
            await notify_users(eur_prices, previous_buy_price, previous_sell_price, previous_nbu_price, "EUR")

    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Ü—ñ–Ω–∏ USD –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    supabase.table("prices").insert({**usd_prices, "timestamp": formatted_time, "currency": "USD"}).execute()

    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Ü—ñ–Ω–∏ EUR –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    supabase.table("prices").insert({**eur_prices, "timestamp": formatted_time, "currency": "EUR"}).execute()


async def notify_users(prices, previous_buy_price, previous_sell_price, previous_nbu_price=None, currency="USD"):
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    response = supabase.table("users").select("user_id").execute()
    user_ids = [user["user_id"] for user in response.data]

    # –û–±–∏—Ä–∞—î–º–æ –µ–º–æ–¥–∑—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≤–∞–ª—é—Ç–∏
    currency_emoji = "üíµ" if currency == "USD" else "üí∂"

    for user_id in user_ids:
        message = (
            f"{currency_emoji} <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É {currency}</b> {currency_emoji}\n\n"
            f"üîπ <b>–ö—É–ø—ñ–≤–ª—è:</b> {prices['buy_price']} –≥—Ä–Ω\n"
            f"üîπ <b>–ü—Ä–æ–¥–∞–∂:</b> {prices['sell_price']} –≥—Ä–Ω\n"
            f"üè¶ <b>–ö—É—Ä—Å –ù–ë–£:</b> {prices['nbu_price']} –≥—Ä–Ω\n"
        )

        # –ó–º—ñ–Ω–∏
        changes = []

        if previous_buy_price and prices["buy_price"] != previous_buy_price:
            change = prices["buy_price"] - previous_buy_price
            arrow = "üîº" if change > 0 else "üîΩ"
            changes.append(
                f"{arrow} <b>–ó–º—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ:</b> {previous_buy_price} ‚Üí {prices['buy_price']} –≥—Ä–Ω ({change:+.2f})"
            )

        if previous_sell_price and prices["sell_price"] != previous_sell_price:
            change = prices["sell_price"] - previous_sell_price
            arrow = "üîº" if change > 0 else "üîΩ"
            changes.append(
                f"{arrow} <b>–ó–º—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É:</b> {previous_sell_price} ‚Üí {prices['sell_price']} –≥—Ä–Ω ({change:+.2f})"
            )

        if previous_nbu_price and prices["nbu_price"] != previous_nbu_price:
            change = prices["nbu_price"] - previous_nbu_price
            arrow = "üîº" if change > 0 else "üîΩ"
            changes.append(
                f"{arrow} <b>–ó–º—ñ–Ω–∞ –ù–ë–£:</b> {previous_nbu_price} ‚Üí {prices['nbu_price']} –≥—Ä–Ω ({change:+.2f})"
            )

        if changes:
            message += "\n" + "\n".join(changes)

        await bot.send_message(user_id, message, parse_mode='HTML')


async def scheduler():
    while True:
        await check_prices()
        await asyncio.sleep(900)  # 15 —Ö–≤–∏–ª–∏–Ω


async def main():
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å–Ω—É—é—Ç—å
    await ensure_tables_exist()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    asyncio.create_task(scheduler())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    import logging

    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
